//"bloons" style game, part 1
//coded by Dr. Mo, Feb 2022
//dynamicsofanasteroid.com
#include <SFML/Graphics.hpp>
#include <vector>
#include<iostream>
using namespace std;

//discussion questions for students:
//1) How would you *avoid* diagonals in the path? How do you purposely create them?
//2) Why the "-1" in this line: if(currPath < pathPoints.size()-1)? Why is it needed?
//3) What's the difference between a struct and a class? Could we have used a class instead of a struct?


//create a struct: structs are like classes, but no functions (just variables)
struct point {
    int x;
    int y;
};

class loon {
private:
    int xpos;
    int ypos;
    int currPath;
public:
    
    loon(int x, int y);
    void move(vector<point>myPath);
    void draw(sf::RenderWindow& window);
};

int main()
{
    //set up path points using the struct we made
    struct point p1;
    p1.x = 100;
    p1.y = 400;
    struct point p2;
    p2.x = 200;
    p2.y = 200;
    struct point p3;
    p3.x = 800;
    p3.y = 400;
    struct point p4;
    p4.x = 200;
    p4.y = 200;
    struct point p5;
    p5.x = -50;
    p5.y = -50;

    //set up vector to hold path points, push path points into it
    vector <point> pathPoints;
    pathPoints.push_back(p1);
    pathPoints.push_back(p2);
    pathPoints.push_back(p3);
    pathPoints.push_back(p4);
    pathPoints.push_back(p5);

    // create game window
    sf::RenderWindow window(sf::VideoMode(800, 800), "bloons");

    //balloon variables
   
    //sf::CircleShape bloon(25);
    //bloon.setFillColor(sf::Color(250, 0, 0));
    //bloon.setPosition(xpos, ypos)
    int currPath = 0; //begin heading towards the first point in the pathing vector
    int ticker = 0;

    loon b1(-50, 400);
    loon b2(-50, 500);

    // GAME LOOP----------------------------------------------------------------------------------------
    while (window.isOpen())
    {
        // check all the window's events that were triggered since the last iteration of the loop
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
        }



        //pathing algorithm*******************************************************************
        //this works by moving the x and y coord of our baloon towards the (x,y) of the next point in the path
        //the path is stored as a series of points in a vector called "pathPoints"

        ticker++; //slow dem bloons down
        if (ticker % 30== 0) { //make 30 bigger to slow down baloon more

            b1.move(pathPoints);
            b2.move(pathPoints);

            //first check if you're at the turning point, move to next point if you are
            //if ((xpos == pathPoints[currPath].x) && (ypos == pathPoints[currPath].y))
              //  if (currPath < pathPoints.size() - 1) //don't walk off end of vector!
                   // currPath++; //iterate to next point

            /*//if not there yet, move our x towards x position of next junction
            //if (xpos < pathPoints[currPath].x)
            //    xpos += 1;
            //if (xpos > pathPoints[currPath].x)
            //    xpos -= 1;
            //and move our y towards y position of next junction
            if (ypos < pathPoints[currPath].y)
                ypos += 1;
            if (ypos > pathPoints[currPath].y)
                ypos -= 1;
            */
        }//end pathing algorithm**************************************************************


        //move da bloon
        //bloon.setPosition(xpos, ypos);

        // Render section----------------------------------------------------------------
        window.clear(sf::Color::Black);
        b1.draw(window);
        b2.draw(window);
        window.display();
    }

    return 0;//buh bye
}

loon::loon(int x, int y) {
    xpos = x;
    ypos = y;
    currPath = -0;

}

void loon::move(vector<point>myPath) {
    if ((xpos == myPath[currPath].x) && (ypos == myPath[currPath].y))
        if (currPath < myPath.size() - 1) //don't walk off end of vector!
            currPath++; //iterate to next point

    //if not there yet, move our x towards x position of next junction
    if (xpos < myPath[currPath].x)
        xpos += 1;
    if (xpos > myPath[currPath].x)
        xpos -= 1;
    //and move our y towards y position of next junction
    if (ypos < myPath[currPath].y)
        ypos += 1;
    if (ypos > myPath[currPath].y)
        ypos -= 1;

}


void loon::draw(sf::RenderWindow& window) { //passes a POINTER to the gamescreen
    sf::CircleShape baloon(25);
    baloon.setFillColor(sf::Color(250, 0, 0));
    baloon.setPosition(xpos, ypos);
    window.draw(baloon);//draw to gamescreen
}
